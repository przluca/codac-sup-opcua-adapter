/******************************************************************************
* $HeadURL: https://svnpub.iter.org/codac/iter/codac/dev/units/m-sup-common-cpp/tags/CODAC-CORE-6.2B2/src/main/c++/config/OPCUAPlantSystemAdapter.cpp $
* $Id: OPCUAPlantSystemAdapter.cpp 101473 2019-08-09 05:43:47Z bauvirb $
*
* Project       : CODAC Core System
*
* Description   : Infrastructure tools - Prototype
*
* Author        : Bertrand Bauvir (IO)
*
* Copyright (c) : 2010-2019 ITER Organization,
*                                 CS 90 046
*                                 13067 St. Paul-lez-Durance Cedex
*                                 France
*
* This file is part of ITER CODAC software.
* For the terms and conditions of redistribution or use of this software
* refer to the file ITER-LICENSE.TXT located in the top level directory
* of the distribution package.
******************************************************************************/

// Global header files

#include <functional> // std::function<>
#include <map> // std::map
#include <new> // std::nothrow
#include <utility> // std::pair
#include <vector> // std::vector

#include <BasicTypes.h> // Misc. type definition
#include <SysTools.h> // ccs::HelperTools::SafeStringCopy, etc.
#include <CyclicRedundancyCheck.h>

#include <log-api.h> // Logging helper functions

#include <ObjectFactory.h>

#include <AnyTypeDatabase.h>

#include <OPCUAClient.h>

// Local header files

#include "OPCUAPlantSystemAdapter.h"

// Constants

#undef LOG_ALTERN_SRC
#define LOG_ALTERN_SRC "sup::core"

// Type definition

namespace sup {

namespace core {

class OPCUAPlantSystemAdapterImpl
{

  private:

    ccs::types::AnyValue* __config_cache;

    ccs::types::string __ua_srvr;
    ccs::base::OPCUAClient* __ua_clnt;

    std::vector<std::tuple<std::string,std::string,const std::shared_ptr<const ccs::types::ScalarType>>> __assoc;

  public:

    OPCUAPlantSystemAdapterImpl (void);
    virtual ~OPCUAPlantSystemAdapterImpl (void);

    bool ReadConfiguration (const std::string& name, ccs::types::AnyValue& value) const;
    bool LoadConfiguration (const std::string& name, const ccs::types::AnyValue& value, const ccs::types::uint32 seed, const ccs::types::uint32 checksum);

    bool SetServer (const char* server) { ccs::HelperTools::SafeStringCopy(__ua_srvr, server, STRING_MAX_LENGTH); return true;};

    bool CreateConfigurationCache (const std::string& name, const std::string& type);
    bool CreateChannelAssociation (const std::string& name, const std::string& chan, const std::string& type);
    bool StartOPCUAClient (void);

};

// Function declaration

ccs::base::AnyObject* OPCUAPlantSystemAdapter_Constructor (void);

// Global variables

bool OPCUAPlantSystemAdapter_IsRegistered =
        (ccs::base::GlobalObjectFactory::Register("sup::core::OPCUAPlantSystemAdapter",
        (ccs::base::AnyObject_Constructor_t) &OPCUAPlantSystemAdapter_Constructor) == STATUS_SUCCESS);

// Function definition
  
ccs::base::AnyObject* OPCUAPlantSystemAdapter_Constructor (void) 
{

  sup::core::OPCUAPlantSystemAdapter* ref = new (std::nothrow) sup::core::OPCUAPlantSystemAdapter ();

  return dynamic_cast<ccs::base::AnyObject*>(ref);

}

bool OPCUAPlantSystemAdapter::SetParameter (const char* name, const char* value)
{

  bool status = ((static_cast<const char*>(NULL) != name) &&
                (static_cast<const char*>(NULL) != value));

  if (status)
    {
      if (std::string(name) == "serverUrl")
        {
          status = (static_cast<OPCUAPlantSystemAdapterImpl*>(NULL) != __impl);

          if (status)
            {
              status = __impl->SetServer(value);
            }
        }

      if ((std::string(name) == "verbose") && (std::string(value) == "true"))
        {
          ccs::log::SetStdout();
        }
    }

  return status;

}

bool OPCUAPlantSystemAdapter::ProcessMessage (const char* msg)
{

  bool status = !ccs::HelperTools::IsUndefinedString(msg);

  log_info("OPCUAPlantSystemAdapter::ProcessMessage - Entering method");

  if (status)
    {
      if (true == ccs::HelperTools::Contain(msg, "Create"))
        {
          const char* p_buf = msg;
      
          while ((*p_buf != 0) && (*p_buf != '{')) { p_buf += 1; }
          status = ((*p_buf != 0) && (-1 != ccs::HelperTools::FindMatchingBrace(p_buf)));

          ccs::types::string name = STRING_UNDEFINED;
          ccs::types::string type = STRING_UNDEFINED;

          if (status)
            {
              status = ccs::HelperTools::GetAttributeFromJSONContent(p_buf, "name", name, ccs::types::MaxStringLength);

              if (status)
                {
                  status = ccs::HelperTools::Strip(name, "\"");
                }
            }

          if (status)
            {
              status = ccs::HelperTools::GetAttributeFromJSONContent(p_buf, "type", type, ccs::types::MaxStringLength);

              if (status)
                {
                  status = ccs::HelperTools::Strip(type, "\"");
                }
            }

          if (status)
            {
              status = (static_cast<OPCUAPlantSystemAdapterImpl*>(NULL) != __impl);
            }

          if (status)
            {
              log_info("OPCUAPlantSystemAdapter::ProcessMessage - Create structured variable '%s' with type '%s' ..", name, type);
              status = __impl->CreateConfigurationCache(std::string(name), std::string(type));

              if (status)
                {
                  log_info(".. success");
                }
              else
                {
                  log_error(".. failure");
                }
            }
        }

      if (true == ccs::HelperTools::Contain(msg, "Associate"))
        {
          const char* p_buf = msg;
      
          while ((*p_buf != 0) && (*p_buf != '{')) { p_buf += 1; }
          status = ((*p_buf != 0) && (-1 != ccs::HelperTools::FindMatchingBrace(p_buf)));

          ccs::types::string name = STRING_UNDEFINED;
          ccs::types::string type = STRING_UNDEFINED;
          ccs::types::string chan = STRING_UNDEFINED;

          if (status)
            {
              status = ccs::HelperTools::GetAttributeFromJSONContent(p_buf, "name", name, ccs::types::MaxStringLength);

              if (status)
                {
                  status = ccs::HelperTools::Strip(name, "\"");
                }
            }

          if (status)
            {
              status = ccs::HelperTools::GetAttributeFromJSONContent(p_buf, "type", type, ccs::types::MaxStringLength);

              if (status)
                {
                  status = ccs::HelperTools::Strip(type, "\"");
                }

              if (!status)
                { // Type will be inferred from the configuration variable
                  status = true;
                }
            }

          if (status)
            {
              status = ccs::HelperTools::GetAttributeFromJSONContent(p_buf, "channel", chan, ccs::types::MaxStringLength);

              if (status)
                {
                  status = ccs::HelperTools::Strip(chan, "\"");
                }
            }

          if (status)
            {
              status = (static_cast<OPCUAPlantSystemAdapterImpl*>(NULL) != __impl);
            }

          if (status)
            {
              log_info("OPCUAPlantSystemAdapter::ProcessMessage - Create association ..");
              status = __impl->CreateChannelAssociation(std::string(name), std::string(chan), std::string(type));

              if (status)
                {
                  log_info(".. success");
                }
              else
                {
                  log_error(".. failure");
                }
            }
        }

      if (true == ccs::HelperTools::Contain(msg, "Start"))
        {
          if (status)
            {
              status = (static_cast<OPCUAPlantSystemAdapterImpl*>(NULL) != __impl);
            }

          if (status)
            {
              log_info("OPCUAPlantSystemAdapter::ProcessMessage - Start OPC UA client ..");
              status = __impl->StartOPCUAClient();
            }
        }
    }

  if (status)
    {
      log_info("OPCUAPlantSystemAdapter::ProcessMessage - .. success");
    }
  else
    {
      log_error("OPCUAPlantSystemAdapter::ProcessMessage - .. failure");
    }

  log_info("OPCUAPlantSystemAdapter::ProcessMessage - Leaving method");

  return status;

}

bool OPCUAPlantSystemAdapter::ReadConfiguration (const std::string& name, ccs::types::AnyValue& value) const
{

  bool status = (static_cast<OPCUAPlantSystemAdapterImpl*>(NULL) != __impl);

  if (status)
    {
      status = __impl->ReadConfiguration(name, value);
    }

  return status;

}

bool OPCUAPlantSystemAdapter::LoadConfiguration (const std::string& name, const ccs::types::AnyValue& value, const ccs::types::uint32 seed, const ccs::types::uint32 checksum)
{

  bool status = (static_cast<OPCUAPlantSystemAdapterImpl*>(NULL) != __impl);

  if (status)
    {
      status = __impl->LoadConfiguration(name, value, seed, checksum);
    }

  return status;

}

bool OPCUAPlantSystemAdapterImpl::ReadConfiguration (const std::string& name, ccs::types::AnyValue& value) const
{

  bool status = (static_cast<ccs::types::AnyValue*>(NULL) != __config_cache);

  for (ccs::types::uint32 index = 0u; (index < __assoc.size()) && status; index += 1u)
    {
      log_info("OPCUAPlantSystemAdapterImpl::ReadConfiguration - Update cache '%s' attribute ..", std::get<0>(__assoc[index]).c_str());
      memcpy(ccs::HelperTools::GetAttributeReference(__config_cache, std::get<0>(__assoc[index]).c_str()), 
             __ua_clnt->GetVariable(std::get<1>(__assoc[index]).c_str())->GetInstance(), 
             __ua_clnt->GetVariable(std::get<1>(__assoc[index]).c_str())->GetSize());
    }

  if (status)
    {
      value = *__config_cache; // AnyValue::operator= (const AnyValue&)
    }

  return status;

}

bool OPCUAPlantSystemAdapterImpl::LoadConfiguration (const std::string& name, const ccs::types::AnyValue& value, const ccs::types::uint32 seed, const ccs::types::uint32 checksum)
{

  bool status = (static_cast<ccs::types::AnyValue*>(NULL) != __config_cache);

  // Snapshot
  ccs::types::AnyValue copy; 

  if (status)
    {
      status = ReadConfiguration(name, copy);
    }

  if (status)
    {
      // Update cache
      *__config_cache = value; // AnyValue::operator= (const AnyValue&)
      status = (checksum == ccs::HelperTools::CyclicRedundancyCheck<ccs::types::uint32>(reinterpret_cast<ccs::types::uint8*>(__config_cache->GetInstance()), __config_cache->GetSize(), seed));
    }

  for (ccs::types::uint32 index = 0u; (status && (index < __assoc.size())); index += 1u)
    {
      log_info("OPCUAPlantSystemAdapterImpl::LoadConfiguration - Update from cache '%s' attribute ..", std::get<0>(__assoc[index]).c_str());
      memcpy(__ua_clnt->GetVariable(std::get<1>(__assoc[index]).c_str())->GetInstance(), 
             ccs::HelperTools::GetAttributeReference(__config_cache, std::get<0>(__assoc[index]).c_str()), 
             __ua_clnt->GetVariable(std::get<1>(__assoc[index]).c_str())->GetSize());
              
      status = __ua_clnt->UpdateVariable(std::get<1>(__assoc[index]).c_str());
    }

  // Let the CA cache also update through monitors
  if (status)
    {
      log_info("OPCUAPlantSystemAdapterImpl::LoadConfiguration - .. check monitors ..");
      ccs::HelperTools::SleepFor(1000000000ul); // 1sec
    }

  for (ccs::types::uint32 index = 0u; (status && (index < __assoc.size())); index += 1u)
    {
      memcpy(ccs::HelperTools::GetAttributeReference(__config_cache, std::get<0>(__assoc[index]).c_str()), 
             __ua_clnt->GetVariable(std::get<1>(__assoc[index]).c_str())->GetInstance(), 
             __ua_clnt->GetVariable(std::get<1>(__assoc[index]).c_str())->GetSize());
    }

  if (status)
    {
      log_info("OPCUAPlantSystemAdapterImpl::LoadConfiguration - .. verify checksum again ..");
      status = (checksum == ccs::HelperTools::CyclicRedundancyCheck<ccs::types::uint32>(reinterpret_cast<ccs::types::uint8*>(__config_cache->GetInstance()), __config_cache->GetSize(), seed));
    }

  if (status)
    {
      log_info("OPCUAPlantSystemAdapter::LoadConfiguration - .. success");
    }
  else
    {
      log_error("OPCUAPlantSystemAdapter::LoadConfiguration - .. failure");
    }

  if (!status)
    {
      log_error("OPCUAPlantSystemAdapter::LoadConfiguration - Restore snapshot");

      for (ccs::types::uint32 index = 0u; index < __assoc.size(); index += 1u)
        {
          memcpy(__ua_clnt->GetVariable(std::get<1>(__assoc[index]).c_str())->GetInstance(), 
                 ccs::HelperTools::GetAttributeReference(&copy, std::get<0>(__assoc[index]).c_str()), 
                 __ua_clnt->GetVariable(std::get<1>(__assoc[index]).c_str())->GetSize());
          
          __ua_clnt->UpdateVariable(std::get<1>(__assoc[index]).c_str());
        }
    }

  return status;

}

bool OPCUAPlantSystemAdapterImpl::CreateConfigurationCache (const std::string& name, const std::string& type)
{

  bool status = (static_cast<ccs::types::AnyValue*>(NULL) == __config_cache);

  std::shared_ptr<const ccs::types::AnyType> desc;

  if (status)
    {
      desc = ccs::types::GlobalTypeDatabase::GetType(type.c_str());
      status = static_cast<bool>(desc);
    }

  if (status)
    {
      __config_cache = new (std::nothrow) ccs::types::AnyValue (desc);
      status = (static_cast<ccs::types::AnyValue*>(NULL) != __config_cache);
    }

  return status;

}

bool OPCUAPlantSystemAdapterImpl::CreateChannelAssociation (const std::string& name, const std::string& chan, const std::string& type)
{

  bool status = (static_cast<ccs::types::AnyValue*>(NULL) != __config_cache);

  std::shared_ptr<const ccs::types::AnyType> desc;

  if (status)
    {
      desc = ccs::types::GlobalTypeDatabase::GetType(type.c_str());
      status = static_cast<bool>(desc);

      if (!status && type.empty())
        { // Get the type description from the configuration variable
          desc = ccs::HelperTools::GetAttributeType(__config_cache, name.c_str());
          status = static_cast<bool>(desc);
        }
    }

  if (status)
    {
      status = ccs::HelperTools::Is<ccs::types::ScalarType>(desc);
    }

  if (status)
    {
      status = ccs::HelperTools::HasAttribute(__config_cache, name.c_str());
    }

  if (status)
    {
      // Register association
      __assoc.push_back(std::make_tuple(name, chan, std::dynamic_pointer_cast<const ccs::types::ScalarType>(desc)));
    }

  return status;

}

bool OPCUAPlantSystemAdapterImpl::StartOPCUAClient (void)
{

  bool status = (static_cast<ccs::base::OPCUAClient*>(NULL) == __ua_clnt);

  if (status)
    {
      __ua_clnt = new (std::nothrow) ccs::base::OPCUAClient (__ua_srvr);
      status = (static_cast<ccs::base::OPCUAClient*>(NULL) != __ua_clnt);
    }

  // Configure CA client
  for (ccs::types::uint32 index = 0u; (status && (index < __assoc.size())); index += 1u)
    {
      //using namespace std::placeholders;
      status = __ua_clnt->AddVariable(std::get<1>(__assoc[index]).c_str(), ccs::types::AnyputVariable, std::get<2>(__assoc[index]));
    }

  if (status)
    {
      status = __ua_clnt->Launch();
    }

  return status;

}

OPCUAPlantSystemAdapter::OPCUAPlantSystemAdapter (void)
{

  log_info("OPCUAPlantSystemAdapter::OPCUAPlantSystemAdapter - Entering method");

  __impl = new (std::nothrow) OPCUAPlantSystemAdapterImpl ();

  return;

}
  
OPCUAPlantSystemAdapterImpl::OPCUAPlantSystemAdapterImpl (void)
{

  // Initialise attributes
  __config_cache = static_cast<ccs::types::AnyValue*>(NULL);

  // Create CA client
  __ua_clnt = static_cast<ccs::base::OPCUAClient*>(NULL);

  return;

}

OPCUAPlantSystemAdapter::~OPCUAPlantSystemAdapter (void)
{

  if (__builtin_expect((static_cast<OPCUAPlantSystemAdapterImpl*>(NULL) != __impl), 1)) // Likely
    {
      delete __impl;
      __impl = static_cast<OPCUAPlantSystemAdapterImpl*>(NULL);
    }

  return;

}
  
OPCUAPlantSystemAdapterImpl::~OPCUAPlantSystemAdapterImpl (void)
{

  if (__builtin_expect((static_cast<ccs::base::OPCUAClient*>(NULL) != __ua_clnt), 1)) // Likely
    {
      delete __ua_clnt;
      __ua_clnt = static_cast<ccs::base::OPCUAClient*>(NULL);
    }

  return;

}

} // namespace core

} // namespace sup

#undef LOG_ALTERN_SRC

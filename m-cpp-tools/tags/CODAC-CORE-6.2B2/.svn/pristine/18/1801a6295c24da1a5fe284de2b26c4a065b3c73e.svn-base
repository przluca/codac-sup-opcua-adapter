/******************************************************************************
* $HeadURL$
* $Id$
*
* Project	: CODAC Core System
*
* Description	: Generic type class definition
*
* Author        : Bertrand Bauvir (IO)
*
* Copyright (c) : 2010-2019 ITER Organization,
*				  CS 90 046
*				  13067 St. Paul-lez-Durance Cedex
*				  France
*
* This file is part of ITER CODAC software.
* For the terms and conditions of redistribution or use of this software
* refer to the file ITER-LICENSE.TXT located in the top level directory
* of the distribution package.
******************************************************************************/

/**
 * @file PVAToAnyType.h
 * @brief Header file for PVAToAnyType helper routines.
 * @date 08/11/2018
 * @author Bertrand Bauvir (IO)
 * @copyright 2010-2017 ITER Organization
 * @detail The routines defined herein are used to derive/instantiate introspectable
 * ccs::types from PVA types and variables.
 */

#ifndef _PVAToAnyType_h_
#define _PVAToAnyType_h_

// Global header files

#include <memory> // std::shared_ptr, etc.

#include <pv/pvData.h>

#include <common/types.h> // Misc. type definition
#include <common/tools.h> // Misc. helper functions

#include <common/log-api.h> // Logging functions

#include <common/AnyType.h>
#include <common/ArrayType.h>
#include <common/CompoundType.h>
#include <common/ScalarType.h>
//#include <common/CompoundArray.h>
//#include <common/ScalarArray.h>

#include <common/AnyTypeHelper.h>

// Local header files

// Constants

// Type definition

// Global variables

// Function declaration

namespace ccs {

namespace HelperTools {

/**
 * @brief PVAccess to AnyType conversion method.
 * @detail The conversion method is used in cases where the variable type definition (ccs::types)
 * is not known to the application and has to be inferred from the epics::pvData introspectable type
 * or variable.
 *
 * The template is expanded for the following types:
 *   std::shared_ptr<const epics::pvData::Scalar> (introspectable PVA type)
 *   std::shared_ptr<const epics::pvData::PVBoolean> (variable)
 *   std::shared_ptr<const epics::pvData::PVByte>
 *   std::shared_ptr<const epics::pvData::PVUByte>
 *   std::shared_ptr<const epics::pvData::PVShort>
 *   std::shared_ptr<const epics::pvData::PVUShort>
 *   std::shared_ptr<const epics::pvData::PVInt>
 *   std::shared_ptr<const epics::pvData::PVUInt>
 *   std::shared_ptr<const epics::pvData::PVLong>
 *   std::shared_ptr<const epics::pvData::PVULong>
 *   std::shared_ptr<const epics::pvData::PVFloat>
 *   std::shared_ptr<const epics::pvData::PVDouble>
 *   std::shared_ptr<const epics::pvData::PVString>
 *
 * @param inp_value epics::pvData::<Type> instance.
 * @pre
 *   static_cast<bool>(input) == true
 * @return Valid smart pointer if pre-conditions are met.
 */

template <typename Type> inline std::shared_ptr<const ccs::types::ScalarType> PVScalarToAnyType (const Type& input);

/**
 * @brief PVAccess to AnyType conversion method.
 * @detail The conversion method is used in cases where the variable type definition (ccs::types)
 * is not known to the application and has to be inferred from the epics::pvData introspectable type
 * or variable.
 *
 * The method instantiates a ccs::types::ArrayType corresponding to the discovered PVA array type.
 *
 * The template is expanded for the following types:
 *   std::shared_ptr<const epics::pvData::Array> (introspectable PVA type)
 *   std::shared_ptr<const epics::pvData::PVBooleanArray> (variable)
 *   std::shared_ptr<const epics::pvData::PVByteArray>
 *   std::shared_ptr<const epics::pvData::PVUByteArray>
 *   std::shared_ptr<const epics::pvData::PVShortArray>
 *   std::shared_ptr<const epics::pvData::PVUShortArray>
 *   std::shared_ptr<const epics::pvData::PVIntArray>
 *   std::shared_ptr<const epics::pvData::PVUIntArray>
 *   std::shared_ptr<const epics::pvData::PVLongArray>
 *   std::shared_ptr<const epics::pvData::PVULongArray>
 *   std::shared_ptr<const epics::pvData::PVFloatArray>
 *   std::shared_ptr<const epics::pvData::PVDoubleArray>
 *   std::shared_ptr<const epics::pvData::PVStringArray>
 *   std::shared_ptr<const epics::pvData::PVStructureArray>
 *
 * @return Valid smart pointer if successful.
 *
 * @note The PVA introspection interface does only support/declare variable (i.e. undefined) size
 * structure arrays. The type derivation for structure arrays is only possible through the PVStructureArray
 * instance and not its type introspection interface.
 */

template <typename Type> inline std::shared_ptr<const ccs::types::ArrayType> PVArrayToAnyType (const Type& input);

/**
 * @brief PVAccess to AnyType conversion method.
 * @detail The conversion method is used in cases where the variable type definition (ccs::types)
 * is not known to the application and has to be inferred from the epics::pvData introspectable type
 * or variable.
 *
 * The method instantiates a ccs::types::CompoundType corresponding to the discovered PVA structure type.
 *
 * The template is expanded for the following types:
 *   std::shared_ptr<const epics::pvData::Structure> (introspectable PVA type)
 *   std::shared_ptr<const epics::pvData::PVStructure> (variable)
 *
 * @return Valid smart pointer if successful.
 */

template <typename Type> inline std::shared_ptr<const ccs::types::CompoundType> PVStructToAnyType (const Type& input);
template <> inline std::shared_ptr<const ccs::types::CompoundType> PVStructToAnyType<std::shared_ptr<const epics::pvData::Structure>> (const std::shared_ptr<const epics::pvData::Structure>& inp_type);
template <> inline std::shared_ptr<const ccs::types::CompoundType> PVStructToAnyType<std::shared_ptr<const epics::pvData::PVStructure>> (const std::shared_ptr<const epics::pvData::PVStructure>& inp_value);

// Function definition

template <> inline 
std::shared_ptr<const ccs::types::ScalarType> PVScalarToAnyType<std::shared_ptr<const epics::pvData::Scalar>> (const std::shared_ptr<const epics::pvData::Scalar>& inp_type)
{

  std::shared_ptr<const ccs::types::ScalarType> out_type;

  bool status = (inp_type ? true : false);

  if (status)
    {
      if (inp_type->getScalarType() == epics::pvData::pvBoolean)
	out_type = ccs::types::Boolean;
      else if (inp_type->getScalarType() == epics::pvData::pvByte)
	out_type = ccs::types::SignedInteger8;
      else if (inp_type->getScalarType() == epics::pvData::pvUByte)
	out_type = ccs::types::UnsignedInteger8;
      else if (inp_type->getScalarType() == epics::pvData::pvShort)
	out_type = ccs::types::SignedInteger16;
      else if (inp_type->getScalarType() == epics::pvData::pvUShort)
	out_type = ccs::types::UnsignedInteger16;
      else if (inp_type->getScalarType() == epics::pvData::pvInt)
	out_type = ccs::types::SignedInteger32;
      else if (inp_type->getScalarType() == epics::pvData::pvUInt)
	out_type = ccs::types::UnsignedInteger32;
      else if (inp_type->getScalarType() == epics::pvData::pvLong)
	out_type = ccs::types::SignedInteger64;
      else if (inp_type->getScalarType() == epics::pvData::pvULong)
	out_type = ccs::types::UnsignedInteger64;
      else if (inp_type->getScalarType() == epics::pvData::pvFloat)
	out_type = ccs::types::Float32;
      else if (inp_type->getScalarType() == epics::pvData::pvDouble)
	out_type = ccs::types::Float64;
      else if (inp_type->getScalarType() == epics::pvData::pvString)
	out_type = ccs::types::String;
    }

  if (status)
    {
      status = (out_type ? true : false);
    }
  
  if (status)
    {
      log_debug("PVScalarToAnyType - Return type '%s' of size '%u'", out_type->GetName(), out_type->GetSize());
    }
  else
    {
      log_error("PVScalarToAnyType - Return invalid type");
    }

  return out_type;

}

#define ANYSCALARTYPEFROMPVSCALARVARIABLE(OUT_TYPE,INP_TYPE) \
template <> inline \
std::shared_ptr<const ccs::types::ScalarType> PVScalarToAnyType<std::shared_ptr<const INP_TYPE>> (const std::shared_ptr<const INP_TYPE>& inp_value) \
{ \
\
  log_trace("PVScalarToAnyType<" #OUT_TYPE "> - Entering method"); \
\
  std::shared_ptr<const ccs::types::ScalarType> out_type; \
\
  bool status = (inp_value ? true : false); \
\
  if (status) \
    { \
      /* The input variable is the right type (dynamic_cast) */ \
      out_type = OUT_TYPE; \
    } \
\
  log_trace("PVScalarToAnyType<" #OUT_TYPE "> - Leaving method"); \
\
  return out_type; \
\
}

ANYSCALARTYPEFROMPVSCALARVARIABLE(ccs::types::Boolean, epics::pvData::PVBoolean)
ANYSCALARTYPEFROMPVSCALARVARIABLE(ccs::types::SignedInteger8, epics::pvData::PVByte)
ANYSCALARTYPEFROMPVSCALARVARIABLE(ccs::types::UnsignedInteger8, epics::pvData::PVUByte)
ANYSCALARTYPEFROMPVSCALARVARIABLE(ccs::types::SignedInteger16, epics::pvData::PVShort)
ANYSCALARTYPEFROMPVSCALARVARIABLE(ccs::types::UnsignedInteger16, epics::pvData::PVUShort)
ANYSCALARTYPEFROMPVSCALARVARIABLE(ccs::types::SignedInteger32, epics::pvData::PVInt)
ANYSCALARTYPEFROMPVSCALARVARIABLE(ccs::types::UnsignedInteger32, epics::pvData::PVUInt)
ANYSCALARTYPEFROMPVSCALARVARIABLE(ccs::types::SignedInteger64, epics::pvData::PVLong)
ANYSCALARTYPEFROMPVSCALARVARIABLE(ccs::types::UnsignedInteger64, epics::pvData::PVULong)
ANYSCALARTYPEFROMPVSCALARVARIABLE(ccs::types::Float32, epics::pvData::PVFloat)
ANYSCALARTYPEFROMPVSCALARVARIABLE(ccs::types::Float64, epics::pvData::PVDouble)
ANYSCALARTYPEFROMPVSCALARVARIABLE(ccs::types::String, epics::pvData::PVString)

template <> inline 
std::shared_ptr<const ccs::types::ArrayType> PVArrayToAnyType<std::shared_ptr<const epics::pvData::Array>> (const std::shared_ptr<const epics::pvData::Array>& inp_type)
{

  std::shared_ptr<const ccs::types::ArrayType> out_type;

  bool status = (inp_type ? true : false);

  if (status)
    {
      status = (inp_type->getArraySizeType() != epics::pvData::Array::variable);

      if (!status)
	{
	  log_warning("PVArrayToAnyType - Variable size array is not supported");
	}
    }

  if (status && (inp_type->getType() == epics::pvData::scalarArray))
    {
      log_debug("PVArrayToAnyType - Element is scalar");
      std::shared_ptr<const epics::pvData::ScalarArray> type = std::dynamic_pointer_cast<const epics::pvData::ScalarArray>(inp_type);

      if (type->getElementType() == epics::pvData::pvBoolean)
	out_type = std::shared_ptr<ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(type->getID().c_str(), ccs::types::Boolean, type->getMaximumCapacity()));
      else if (type->getElementType() == epics::pvData::pvByte)
	out_type = std::shared_ptr<ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(type->getID().c_str(), ccs::types::SignedInteger8, type->getMaximumCapacity()));
      else if (type->getElementType() == epics::pvData::pvUByte)
	out_type = std::shared_ptr<ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(type->getID().c_str(), ccs::types::UnsignedInteger8, type->getMaximumCapacity()));
      else if (type->getElementType() == epics::pvData::pvShort)
	out_type = std::shared_ptr<ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(type->getID().c_str(), ccs::types::SignedInteger16, type->getMaximumCapacity()));
      else if (type->getElementType() == epics::pvData::pvUShort)
	out_type = std::shared_ptr<ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(type->getID().c_str(), ccs::types::UnsignedInteger16, type->getMaximumCapacity()));
      else if (type->getElementType() == epics::pvData::pvInt)
	out_type = std::shared_ptr<ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(type->getID().c_str(), ccs::types::SignedInteger32, type->getMaximumCapacity()));
      else if (type->getElementType() == epics::pvData::pvUInt)
	out_type = std::shared_ptr<ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(type->getID().c_str(), ccs::types::UnsignedInteger32, type->getMaximumCapacity()));
      else if (type->getElementType() == epics::pvData::pvLong)
	out_type = std::shared_ptr<ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(type->getID().c_str(), ccs::types::SignedInteger64, type->getMaximumCapacity()));
      else if (type->getElementType() == epics::pvData::pvULong)
	out_type = std::shared_ptr<ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(type->getID().c_str(), ccs::types::UnsignedInteger64, type->getMaximumCapacity()));
      else if (type->getElementType() == epics::pvData::pvFloat)
	out_type = std::shared_ptr<ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(type->getID().c_str(), ccs::types::Float32, type->getMaximumCapacity()));
      else if (type->getElementType() == epics::pvData::pvDouble)
	out_type = std::shared_ptr<ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(type->getID().c_str(), ccs::types::Float64, type->getMaximumCapacity()));
      else if (type->getElementType() == epics::pvData::pvString)
	out_type = std::shared_ptr<ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(type->getID().c_str(), ccs::types::String, type->getMaximumCapacity()));
    }
#if 0 // Not yet possible .. structure arrays are only of undetermined size from the type introspection interface
  if (status && (inp_type->getType() == epics::pvData::structureArray))
    {
      log_debug("PVArrayToAnyType - .. is struct");
      std::shared_ptr<const epics::pvData::StructureArray> type = std::dynamic_pointer_cast<const epics::pvData::StructureArray>(inp_type);
      out_type = std::shared_ptr<ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(type->getID().c_str(), PVStructToAnyType(type->getStructure()), type->getMaximumCapacity()));
    }
#endif
  return out_type;

}

#define ANYARRAYTYPEFROMPVARRAYVARIABLE(OUT_TYPE,INP_TYPE) \
template <> inline \
std::shared_ptr<const ccs::types::ArrayType> PVArrayToAnyType<std::shared_ptr<const INP_TYPE>> (const std::shared_ptr<const INP_TYPE>& inp_value) \
{ \
\
  log_trace("PVArrayToAnyType<" #OUT_TYPE "> - Entering method"); \
\
  std::shared_ptr<const ccs::types::ArrayType> out_type; \
\
  bool status = (inp_value ? true : false); \
\
  if (status) \
    { \
      /* The input variable is the right type (dynamic_cast) */ \
      out_type = std::shared_ptr<ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(inp_value->getArray()->getID().c_str(), OUT_TYPE, inp_value->getCapacity())); \
    } \
\
  log_trace("PVArrayToAnyType<" #OUT_TYPE "> - Leaving method"); \
\
  return out_type; \
\
}

ANYARRAYTYPEFROMPVARRAYVARIABLE(ccs::types::Boolean, epics::pvData::PVBooleanArray)
ANYARRAYTYPEFROMPVARRAYVARIABLE(ccs::types::SignedInteger8, epics::pvData::PVByteArray)
ANYARRAYTYPEFROMPVARRAYVARIABLE(ccs::types::UnsignedInteger8, epics::pvData::PVUByteArray)
ANYARRAYTYPEFROMPVARRAYVARIABLE(ccs::types::SignedInteger16, epics::pvData::PVShortArray)
ANYARRAYTYPEFROMPVARRAYVARIABLE(ccs::types::UnsignedInteger16, epics::pvData::PVUShortArray)
ANYARRAYTYPEFROMPVARRAYVARIABLE(ccs::types::SignedInteger32, epics::pvData::PVIntArray)
ANYARRAYTYPEFROMPVARRAYVARIABLE(ccs::types::UnsignedInteger32, epics::pvData::PVUIntArray)
ANYARRAYTYPEFROMPVARRAYVARIABLE(ccs::types::SignedInteger64, epics::pvData::PVLongArray)
ANYARRAYTYPEFROMPVARRAYVARIABLE(ccs::types::UnsignedInteger64, epics::pvData::PVULongArray)
ANYARRAYTYPEFROMPVARRAYVARIABLE(ccs::types::Float32, epics::pvData::PVFloatArray)
ANYARRAYTYPEFROMPVARRAYVARIABLE(ccs::types::Float64, epics::pvData::PVDoubleArray)
ANYARRAYTYPEFROMPVARRAYVARIABLE(ccs::types::String, epics::pvData::PVStringArray)

template <> inline 
std::shared_ptr<const ccs::types::ArrayType> PVArrayToAnyType<std::shared_ptr<const epics::pvData::PVStructureArray>> (const std::shared_ptr<const epics::pvData::PVStructureArray>& inp_value)
{

  std::shared_ptr<const ccs::types::ArrayType> out_type; 

  bool status = (inp_value ? true : false);

  if (status)
    {
      log_debug("PVArrayToAnyType<PVStructureArray> - Capacity '%u'", inp_value->getCapacity());
      status = (inp_value->getCapacity() > 0u);
    }

  if (status)
    {
      epics::pvData::PVStructureArray::const_svector inp_array = inp_value->view();
      //std::shared_ptr<const ccs::types::CompoundType> elem_type = PVStructToAnyType(inp_value->getStructureArray()->getStructure()); // The introspection interface
      // WARNING - In case the structure type contains variable size arrays of structure .. only the type retrieved form the first element will define the
      // overall array type
      std::shared_ptr<const ccs::types::CompoundType> elem_type = PVStructToAnyType(std::const_pointer_cast<const epics::pvData::PVStructure>(inp_array[0])); // The structured variable
      out_type = std::shared_ptr<const ccs::types::ArrayType> (ccs::HelperTools::NewArrayType(inp_value->getArray()->getID().c_str(), elem_type, inp_value->getCapacity()));
    } 

  return out_type;

}

template <> inline 
std::shared_ptr<const ccs::types::CompoundType> PVStructToAnyType<std::shared_ptr<const epics::pvData::Structure>> (const std::shared_ptr<const epics::pvData::Structure>& inp_type)
{

  std::shared_ptr<ccs::types::CompoundType> out_type;

  bool status = (inp_type ? true : false);

  if (status)
    {
      out_type = std::shared_ptr<ccs::types::CompoundType> (new (std::nothrow) ccs::types::CompoundType (inp_type->getID().c_str()));
    }

  for (ccs::types::uint32 index = 0u; (status && (index < inp_type->getNumberFields())); index += 1u)
    {
      const char* attr_name = inp_type->getFieldName(index).c_str();

      log_debug("PVStructToAnyType - Attribute '%s' ..", attr_name);

      if (inp_type->getField(index)->getType() == epics::pvData::scalar)
	{
	  log_debug("PVStructToAnyType - .. is scalar");
	  std::shared_ptr<const ccs::types::ScalarType> attr_type = PVScalarToAnyType(std::dynamic_pointer_cast<const epics::pvData::Scalar>(inp_type->getField(index)));
	  status = (attr_type ? true : false);

	  if (status)
	    {
	      out_type->AddAttribute(attr_name, attr_type);
	    }
	  else
	    {
	      log_warning("PVStructToAnyType - Invalid attribute type");
	      status = true; // Continue
	    }
	}
      else if (inp_type->getField(index)->getType() == epics::pvData::scalarArray)
	{
	  log_debug("PVStructToAnyType - .. is array of scalar");
	  std::shared_ptr<const ccs::types::ArrayType> attr_type = PVArrayToAnyType(std::dynamic_pointer_cast<const epics::pvData::Array>(inp_type->getField(index)));
	  status = (attr_type ? true : false);

	  if (status)
	    {
	      out_type->AddAttribute(attr_name, attr_type);
	    }
	  else
	    {
	      log_warning("PVStructToAnyType - Invalid attribute type");
	      status = true; // Continue
	    }
	}
      else if (inp_type->getField(index)->getType() == epics::pvData::structure)
	{
	  log_debug("PVStructToAnyType - .. is struct");
	  std::shared_ptr<const ccs::types::CompoundType> attr_type = PVStructToAnyType(std::dynamic_pointer_cast<const epics::pvData::Structure>(inp_type->getField(index)));
	  status = (attr_type ? true : false);

	  if (status)
	    {
	      out_type->AddAttribute(attr_name, attr_type);
	    }
	  else
	    {
	      log_warning("PVStructToAnyType - Invalid attribute type");
	      status = true; // Continue
	    }
	}
      else if (inp_type->getField(index)->getType() == epics::pvData::structureArray)
	{
	  log_debug("PVStructToAnyType - .. is array of struct");
	  std::shared_ptr<const ccs::types::ArrayType> attr_type = PVArrayToAnyType(std::dynamic_pointer_cast<const epics::pvData::Array>(inp_type->getField(index)));
	  status = (attr_type ? true : false);

	  if (status)
	    {
	      out_type->AddAttribute(attr_name, attr_type);
	    }
	  else
	    {
	      log_warning("PVStructToAnyType - Invalid attribute type");
	      status = true; // Continue
	    }
	}
    }

  if (!status)
    {
      out_type.reset(); // Does this delete the instantiated CompoundType
    }

  return std::const_pointer_cast<const ccs::types::CompoundType>(out_type);

}

template <> inline 
std::shared_ptr<const ccs::types::CompoundType> PVStructToAnyType<std::shared_ptr<const epics::pvData::PVStructure>> (const std::shared_ptr<const epics::pvData::PVStructure>& inp_value)
{

  std::shared_ptr<ccs::types::CompoundType> out_type;

  bool status = (inp_value ? true : false);

  std::shared_ptr<const epics::pvData::Structure> inp_type;

  if (status)
    {
      inp_type = inp_value->getStructure();
      status = (inp_type ? true : false);
    }

  if (status)
    {
      out_type = std::shared_ptr<ccs::types::CompoundType> (new (std::nothrow) ccs::types::CompoundType (inp_type->getID().c_str()));
    }

  for (ccs::types::uint32 index = 0u; (status && (index < inp_type->getNumberFields())); index += 1u)
    {
      const char* attr_name = inp_type->getFieldName(index).c_str();

      log_debug("PVStructToAnyType - Attribute '%s' ..", attr_name);

      if (inp_type->getField(index)->getType() == epics::pvData::scalar)
	{
	  log_debug("PVStructToAnyType - .. is scalar");
	  std::shared_ptr<const ccs::types::ScalarType> attr_type = PVScalarToAnyType(std::dynamic_pointer_cast<const epics::pvData::Scalar>(inp_type->getField(index)));
	  status = (attr_type ? true : false);

	  if (status)
	    {
	      out_type->AddAttribute(attr_name, attr_type);
	    }
	  else
	    {
	      log_warning("PVStructToAnyType - Invalid attribute type");
	      status = true; // Continue
	    }
	}
      else if (inp_type->getField(index)->getType() == epics::pvData::scalarArray)
	{
	  log_debug("PVStructToAnyType - .. is array of scalar");
#if 0 // Bug 11498 - Array size should be derived from the value field
	  std::shared_ptr<const ccs::types::ArrayType> attr_type = PVArrayToAnyType(std::dynamic_pointer_cast<const epics::pvData::Array>(inp_type->getField(index)));
#else // MARTe declares only variable-size arrays .. even for scalars
	  std::shared_ptr<const ccs::types::ArrayType> attr_type;

	  std::shared_ptr<const epics::pvData::ScalarArray> type = std::dynamic_pointer_cast<const epics::pvData::ScalarArray>(inp_type->getField(index));

	  if (type->getElementType() == epics::pvData::pvBoolean)
	    attr_type = PVArrayToAnyType(inp_value->getSubField<epics::pvData::PVBooleanArray>(std::string(attr_name)));
	  else if (type->getElementType() == epics::pvData::pvByte)
	    attr_type = PVArrayToAnyType(inp_value->getSubField<epics::pvData::PVByteArray>(std::string(attr_name)));
	  else if (type->getElementType() == epics::pvData::pvUByte)
	    attr_type = PVArrayToAnyType(inp_value->getSubField<epics::pvData::PVUByteArray>(std::string(attr_name)));
	  else if (type->getElementType() == epics::pvData::pvShort)
	    attr_type = PVArrayToAnyType(inp_value->getSubField<epics::pvData::PVShortArray>(std::string(attr_name)));
	  else if (type->getElementType() == epics::pvData::pvUShort)
	    attr_type = PVArrayToAnyType(inp_value->getSubField<epics::pvData::PVUShortArray>(std::string(attr_name)));
	  else if (type->getElementType() == epics::pvData::pvInt)
	    attr_type = PVArrayToAnyType(inp_value->getSubField<epics::pvData::PVIntArray>(std::string(attr_name)));
	  else if (type->getElementType() == epics::pvData::pvUInt)
	    attr_type = PVArrayToAnyType(inp_value->getSubField<epics::pvData::PVUIntArray>(std::string(attr_name)));
	  else if (type->getElementType() == epics::pvData::pvLong)
	    attr_type = PVArrayToAnyType(inp_value->getSubField<epics::pvData::PVLongArray>(std::string(attr_name)));
	  else if (type->getElementType() == epics::pvData::pvULong)
	    attr_type = PVArrayToAnyType(inp_value->getSubField<epics::pvData::PVULongArray>(std::string(attr_name)));
	  else if (type->getElementType() == epics::pvData::pvFloat)
	    attr_type = PVArrayToAnyType(inp_value->getSubField<epics::pvData::PVFloatArray>(std::string(attr_name)));
	  else if (type->getElementType() == epics::pvData::pvDouble)
	    attr_type = PVArrayToAnyType(inp_value->getSubField<epics::pvData::PVDoubleArray>(std::string(attr_name)));
	  else if (type->getElementType() == epics::pvData::pvString)
	    attr_type = PVArrayToAnyType(inp_value->getSubField<epics::pvData::PVStringArray>(std::string(attr_name)));
#endif
	  status = (attr_type ? true : false);

	  if (status)
	    {
	      out_type->AddAttribute(attr_name, attr_type);
	    }
	  else
	    {
	      log_warning("PVStructToAnyType - Invalid attribute type");
	      status = true; // Continue
	    }
	}
      else if (inp_type->getField(index)->getType() == epics::pvData::structure)
	{
	  log_debug("PVStructToAnyType - .. is struct");
	  std::shared_ptr<const ccs::types::CompoundType> attr_type = PVStructToAnyType(inp_value->getSubField<epics::pvData::PVStructure>(std::string(attr_name)));
	  status = (attr_type ? true : false);

	  if (status)
	    {
	      out_type->AddAttribute(attr_name, attr_type);
	    }
	  else
	    {
	      log_warning("PVStructToAnyType - Invalid attribute type");
	      status = true; // Continue
	    }
	}
      else if (inp_type->getField(index)->getType() == epics::pvData::structureArray)
	{
	  log_debug("PVStructToAnyType - .. is array of struct");
	  std::shared_ptr<const ccs::types::ArrayType> attr_type = PVArrayToAnyType(inp_value->getSubField<epics::pvData::PVStructureArray>(std::string(attr_name)));
	  status = (attr_type ? true : false);

	  if (status)
	    {
	      out_type->AddAttribute(attr_name, attr_type);
	    }
	  else
	    {
	      log_warning("PVStructToAnyType - Invalid attribute type");
	      status = true; // Continue
	    }
	}
    }

  if (!status)
    {
      out_type.reset(); // Does this delete the instantiated CompoundType
    }

  return std::const_pointer_cast<const ccs::types::CompoundType>(out_type);

}
  
} // namespace HelperTools

} // namespace ccs

#endif // _PVAToAnyType_h_

